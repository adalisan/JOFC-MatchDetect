% 
\documentclass[a4paper]{article}
\usepackage[OT1]{fontenc}
\usepackage{Sweave}

\graphicspath{{./}{./../}{./../graphs/}{./graphs/}}
\begin{document}

\title{Experiments on Graph Data.Rnw}
\author{Sancar Adali}

\maketitle

\SweaveOpts{echo=FALSE,results=hide,debug=TRUE,prefix.string=graphs/JOFC-on-graphs}

\section{1-1 matching}

We wish to apply our approach to  the vertex matching problem in multiple graphs. These simulations will be for the same semi-supervised setting as mentioned in \ref{sec:RelatedWork}, where matchings between some vertices in different graphs are known 
  and the task is to infer the correspondences between the remaining collection of vertices in the graphs.

Suppose $A,B \in \mathcal{R}^{(r+s)\times (r+s)}$ are adjacency matrices for graphs 
 partitioned as ($r$ rows then $s$ rows, $r$ columns then $s$ columns)
\[  A =\left [
\begin{array}{cc} A_{11} & A_{12} \\ A_{21} & A_{22} \end{array} \right ]
\ \ \ \ \ \ \ \ \ B =\left [
\begin{array}{cc} B_{11} & B_{12} \\ B_{21} & B_{22} \end{array} \right ]
\]
To simplify  suppose that $A_{11}=B_{11}$ , ie the first $r$ vertices
of $A$'s graph correspond respectively to the first $r$ vertices of $B$'s graph,
and we wish to complete the isomorphism by determining the correspondences between the pairs of $s$ vertices. 
That is, we seek a permutation matrix $P \in \{0,1\}^{s \times s}$ such that $A=(I_{r \times r}
\oplus P)B(I_{r \times r} \oplus P)^T$, ie
 \[
 \left [
\begin{array}{cc} A_{11} & A_{12} \\ A_{21} & A_{22} \end{array}
\right ]
\left [
\begin{array}{cc} I_{r \times r} & 0_{r \times s} \\ 0_{s \times r} & P \end{array}
\right ]
=
\left [
\begin{array}{cc} I_{r \times r} & 0_{r \times s} \\ 0_{s \times r} & P \end{array}
\right ]
\left [
\begin{array}{cc} B_{11} & B_{12} \\ B_{21} & B_{22} \end{array}
\right ] .
\]

Using omnibus  embedding, it is possible to embed the vertices of two graphs in a commensurate space.
Therefore, the JOFC approach can be used here for determining the pairwise distances between  the vertices of $A$ and $B$.
The next step is to use the pairwise distances to find the optimal 1-1 matchings by the Hungarian algorithm \cite{Hung-algo}. The Hungarian algorithm finds an optimal matching between two sets of vertices such that the total  cost which is the sum of the pairwise distances of matched nodes is minimized.
 
One useful property of dissimilarity representation is that the structure of data is irrelevant once an appropriate dissimilarity function  for the data is available. 
There are many distances that can be defined between vertices in graphs. We assume that an appropriate distance measure is available to us.
In our experiments we will use three different dissimilarities between vertices in a graph:
\begin{itemize}
 \item the shortest path on the  unweighted graph whose adjacency matrix is available
 \item the shortest path on a weighted version of the graph whose adjacency matrix is available
 \item diffusion distance between vertices on the (unweighted?) graph.
 \end{itemize}
 Note that these dissimilarities can only be defined between vertices of the same graph. We impute the inter-condition dissimilarities   as described before\ref{omnibus}.
 
  In the following simulation, $A$ is the adjacency matrix of an Erdos-Renyi graph, that is
  $\left[A\right]_{ij} \sim Binomial(p)$ where $\left[A\right]_{ij}$ is $ij$-th entry of the adjacency matrix  $A$.
   and the adjacency matrix  $B$ is a entry-wise bit-flipped version of the adjacency matrix of $A$, that is
   In the following simulation, $A$ is the adjacency matrix of an Erdos-Renyi graph, that is
  $\left[A\right]_{ij} \sim Binomial(p)$ where $\left[A\right]_{ij}$ is $ij$-th entry of the adjacency matrix  $A$.
   and the adjacency matrix  $B$ is a entry-wise bit-flipped version of the adjacency matrix of $A$, that is
   $\left[B\right]_{ij}|\left[A\right]_{ij}=0 \sim Binomial(p_{10})$ $\left[B\right]_{ij}|\left[A\right]_{ij}=1 \sim Binomial(p_{11})$. Suppose $p_{10}=p_{11}=p$.
  
  The probability of flipping an entry of the adjacency matrix is the perturbation parameter $p_{pert}$ which is the variable on the x-axis. 
  The performance measure is the proportion of true matches to the number of matches. Note that 
  under chance the expected number of true matches is 1, as shown with the dashed line. In the simulation, $r=15$ and $s=5$. $p_{pert}$ varies from $0$ to $1$ in increments of $0.1$. 
  
<<JOFC-on-ER-Graph, echo=FALSE,fig=FALSE,results=hide,cache=TRUE,trace=TRUE>>=
cep=TRUE
verbose= FALSE
oos=TRUE
oos.cep = TRUE

a.cep <-20

n = 20
m = 15 # the first m pairs are known matches ; the last n-m pairs are to-be-matched

npert = 11
nmc = 20
pert=(0:10)/10
nc.jofc.diff = matrix(0,npert,nmc)
nc.jofc.weighted = matrix(0,npert,nmc)
nc.jofc.unweighted = matrix(0,npert,nmc)



nc.cmds = matrix(0,npert,nmc)

matched.cost<-0.01


w.vals.vec <- c(0.5,0.7,0.9,0.95)

w.max.index<-length(w.vals.vec)

matched.cost<-0.01 #If matched.cost is equal to 1, consider an unweighted graph, with edges between matched vertices
#If matched.cost is  between 0 and 1, the graph is weighted with edges between matched vertices with weights equal to matched.cost. Edges between 
# vertices of the same condition have either weight 1 or 2 according to whether they're connected according to given adjacency matrix or not.

d.dim<-4
T.diff<-1
c.imp<- 20

dims.for.dist<-2:d.dim

# these three lines are not used, really ...
# they just set up a dummy D.M which is the correct object for input to fullmatch".
# i'm just using Sancar's object ... i don't really understand it!
G<-ER(n,0.5)
G.comb<-omnibusM(G,G,diag(n))
Graph.M <- graph.adjacency(G.comb,weighted= NULL ,mode="undirected")
D.M<-shortest.paths(Graph.M)

seed<-123
set.seed(seed)
for(imc in 1:nmc)
{
	G<-ER(n,0.5)
	for(ipert in 1:npert)
	{
		Y.emb<-NULL
		Gp<-bitflip(G ,pert[ipert],pert[ipert])
		Graph.1<-graph.adjacency(G)
		Graph.2<-graph.adjacency(Gp)
		D.1<-shortest.paths(Graph.1)
		D.2<-shortest.paths(Graph.2)
		oos.sampling<-sample(1:n, size=(n-m), replace=FALSE)
		in.sample.ind<-rep(TRUE,2*n)
		in.sample.ind[oos.sampling]<-FALSE
		in.sample.ind[n+oos.sampling]<-FALSE
		#if (imc==1) print(in.sample.ind)
		
		J.1 =jofc.diffusion.dist(G,Gp,
				in.sample.ind,
				d.dim=d.dim,
				w.vals.vec,
				graph.is.directed=FALSE,
				oos=oos,
				wt.matrix.1=NULL,
				wt.matrix.2=NULL,
				sep.graphs=TRUE
		)
		
		
		M = solveMarriage(J.1[[1]])
		nc.jofc.diff[ipert,imc] = present(M)         # returns the number correct in the marriage?
		
		
		J.2 =jofc(G,Gp,
				in.sample.ind,
				d.dim=d.dim,
				w.vals.vec,
				graph.is.directed=FALSE,	
				oos=oos,          
				
				wt.matrix.1=NULL,
				wt.matrix.2=NULL,
				sep.graphs=TRUE)
		
		M = solveMarriage(J.2[[1]])
		nc.jofc.weighted[ipert,imc] = present(M)         # returns the number correct in the marriage?
		
		J.3 =jofc(G,Gp,
				in.sample.ind,
				d.dim=d.dim,
				w.vals.vec,	
				graph.is.directed=FALSE,
				oos=oos,
				use.weighted.graph=FALSE,
				wt.matrix.1=NULL,
				wt.matrix.2=NULL,
				sep.graphs=TRUE)
		
		M = solveMarriage(J.3[[1]])
		nc.jofc.unweighted[ipert,imc] = present(M)         # returns the number correct in the marriage?
		
		
		
		
		
		
		myD.M = D.M
		myD.M[1:n,1:n]=D.1
		myD.M[(n+1):(2*n),(n+1):(2*n)]=D.2
		myD.M[1:n,(n+1):(2*n)]=(D.1+D.2)/2
		myD.M[(n+1):(2*n),1:n]=(D.1+D.2)/2
		for(i in 1:n) for(j in (n+m+1):(2*n)) myD.M[i,j] = myD.M[j,i] = a.cep
		for(i in (m+1):n) for(j in (n+1):(2*n)) myD.M[i,j] = myD.M[j,i] = a.cep
		
		
		if (oos.cep){
			oos.in.sample.vec<- c(1:m,(n+1):(n+m))
			oos.in.sample.ind<- rep(FALSE,2*n)
			oos.in.sample.ind[oos.in.sample.vec]<-TRUE
			myD.M.in<- myD.M[oos.in.sample.ind, oos.in.sample.ind]
			ccc = cmdscale(myD.M.in,k=d.dim,eig=T)
			#plot(ccc$eig)
			#pairs(ccc$points , col=colvec,pch=c(Ln,Ln))
			#plot(ccc$points[,c(2,3)] , col=colvec,pch=c(Ln,Ln))
			Y.emb<-oosMDS(myD.M,X=ccc$points, w=ifelse(oos.in.sample.ind,1,0),init="gower")			 			
			U = as.matrix(dist(Y.emb[,dims.for.dist]))
		} else {

			ccc = cmdscale(myD.M,k=d.dim,eig=T)
			#plot(ccc$eig)
			#pairs(ccc$points , col=colvec,pch=c(Ln,Ln))
			#plot(ccc$points[,c(2,3)] , col=colvec,pch=c(Ln,Ln))
			
			U = as.matrix(dist(ccc$points[ c((m+1):(n),(n+m+1):(n+n)) ,dims.for.dist]))
		}
		
		
		
		
		
		
		M = fullmatch(U[1:(n-m),(n-m+1):(2*(n-m))])
		nc.cmds[ipert,imc] = present(M)         # returns the number correct in the marriage?
		
		
		
		
	}
}



<<graph-plot-1, echo=FALSE,fig=TRUE,results=hide,cache=FALSE,dependson=JOFC-on-ER-Graph >>=
### notice that the %correctmatches decreases as perturbation parameter increases! :-)


colors.vec<-c( "red","blue","orange","green")
colors.vec<-colors.vec[1:4]
plot(pert,apply(nc.jofc.diff,1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),col=colors.vec[1])
lines(pert,apply(nc.cmds,1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),pch=2,col=colors.vec[2])

lines(pert,apply(nc.jofc.weighted,1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),pch=3,col=colors.vec[3])

lines(pert,apply(nc.jofc.unweighted,1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),pch=4,col=colors.vec[4])

legend.txt<- c("diff dist","CMDS","weighted.graph","unweighted.graph")
legend(x="topright",legend=legend.txt, col =colors.vec,pch=1:4)
title("marriage o jofc")
abline(h=1/(n-m),lty=2) ### chance?  apparently not!?
abline(v=1/2,lty=2) ### chance?  gotta be!?
@

In the plot above, JOFC approach applied to  dissimilarities based on weighted and unweighted graphs is compared with classical MDS on dissimilarities of weighted graphs.

Note that JOFC for unweighted and weighted graphs  have better performance compared to CMDS. As the perturbation parameter gets larger, the performance degrades until it is indistinguishable from random chance at $pert=0.5$.



This graph shows the effect of embedding dimension $d$ on the probability of true matches.
  
<<JOFC-graph-sim-d, echo=FALSE,fig=FALSE,results=hide,cache=TRUE,depenson=JOFC-on-ER-Graph >>=

d.dim.vec<-c(4,6,10,13,17)

nc.jofc.diff.d       = array(0,dim=c(npert,nmc,length(d.dim.vec)))
nc.jofc.weighted.d   = array(0,dim=c(npert,nmc,length(d.dim.vec)))
nc.jofc.unweighted.d = array(0,dim=c(npert,nmc,length(d.dim.vec)))



nc.cmds.d           = array(0,dim=c(npert,nmc,length(d.dim.vec)-1))

# these three lines are not used, really ...
# they just set up a dummy D.M which is the correct object for input to fullmatch".
# i'm just using Sancar's object ... i don't really understand it!
G<-ER(n,0.5)
G.comb<-omnibusM(G,G,diag(n))
Graph.M <- graph.adjacency(G.comb,weighted= NULL ,mode="undirected")
D.M<-shortest.paths(Graph.M)

seed<-123

for (d.dim in d.dim.vec){
	dims.for.dist<-2:d.dim
	d.i<-which(d.dim.vec==d.dim)
	for(imc in 1:nmc)
	{
		G<-ER(n,0.5)
		for(ipert in 1:npert)
		{
			
			Gp<-bitflip(G ,pert[ipert],pert[ipert])
			Graph.1<-graph.adjacency(G)
			Graph.2<-graph.adjacency(Gp)
			D.1<-shortest.paths(Graph.1)
			D.2<-shortest.paths(Graph.2)
			oos.sampling<-sample(1:n,size=n-m,replace=FALSE)
			in.sample.ind<-rep(TRUE,2*n)
			in.sample.ind[oos.sampling]<-FALSE
			in.sample.ind[n+oos.sampling]<-FALSE
			
			
			J.1 =jofc.diffusion.dist(G,Gp,
					in.sample.ind,
					d.dim=d.dim,
					w.vals.vec,
					graph.is.directed=FALSE,
					oos=oos,
					wt.matrix.1=NULL,
					wt.matrix.2=NULL,
					sep.graphs=TRUE)
			
			M = solveMarriage(J.1[[1]])
			nc.jofc.diff.d[ipert,imc,d.i] = present(M)         # returns the number correct in the marriage?
			
			
			J.2 =jofc(G,Gp,
					in.sample.ind,
					
					d.dim=d.dim,
					w.vals.vec,
					graph.is.directed=FALSE,
					oos=oos,          
					wt.matrix.1=NULL,
					wt.matrix.2=NULL,
					sep.graphs=TRUE)
			
			M = solveMarriage(J.2[[1]])
			nc.jofc.weighted.d[ipert,imc,d.i] = present(M)         # returns the number correct in the marriage?
			
			J.3 =jofc(G,Gp,
					in.sample.ind,
					d.dim=d.dim,
					w.vals.vec,
					graph.is.directed=FALSE,
					oos=oos,
					use.weighted.graph=FALSE,
					wt.matrix.1=NULL,
					wt.matrix.2=NULL,
					sep.graphs=TRUE)
			
			M = solveMarriage(J.3[[1]])
			nc.jofc.unweighted.d[ipert,imc,d.i] = present(M)         # returns the number correct in the marriage?
			
			
			
			
			
			if (cep){
				U<-matrix()
				
				myD.M = D.M # i use just the object D.M ... none of the original entries!
				myD.M[1:n,1:n]=D.1
				myD.M[(n+1):(2*n),(n+1):(2*n)]=D.2
				myD.M[1:n,(n+1):(2*n)]=(D.1+D.2)/2
				myD.M[(n+1):(2*n),1:n]=(D.1+D.2)/2
				for(i in 1:n) for(j in (n+m+1):(2*n)) myD.M[i,j] = myD.M[j,i] = a.cep
				for(i in (m+1):n) for(j in (n+1):(2*n)) myD.M[i,j] = myD.M[j,i] = a.cep
				
				
				if (oos.cep){
					
					oos.in.sample.vec<- c(1:m,(n+1):(n+m))
					oos.in.sample.ind<- rep(FALSE,2*n)
					oos.in.sample.ind[oos.in.sample.vec]<-TRUE
					myD.M.in<- myD.M[oos.in.sample.ind,oos.in.sample.ind]
					
					ccc = cmdscale(myD.M.in,k=d.dim,eig=T)
					#plot(ccc$eig)
					#pairs(ccc$points , col=colvec,pch=c(Ln,Ln))
					#plot(ccc$points[,c(2,3)] , col=colvec,pch=c(Ln,Ln))
					Y.emb<-oosMDS(myD.M,X=ccc$points, w=ifelse(oos.in.sample.ind,1,0),init="gower")					
# 			
					U = as.matrix(dist(Y.emb[,dims.for.dist]))
				} else {
					
					
					ccc = cmdscale(myD.M,k=d.dim,eig=T)
					#plot(ccc$eig)
					#pairs(ccc$points , col=colvec,pch=c(Ln,Ln))
					#plot(ccc$points[,c(2,3)] , col=colvec,pch=c(Ln,Ln))
					
					U = as.matrix(dist(ccc$points[ c((m+1):(n),(n+m+1):(n+n)) ,dims.for.dist]))
				}
				M = fullmatch(U[1:(n-m),(n-m+1):(2*(n-m))])
				nc.cmds.d[ipert,imc,d.i] = present(M)         # returns the number correct in the marriage?
			}
			
						
		}
	}
}
@


%<<graph-plot-2, echo=FALSE,fig=TRUE,results=hide,cache=FALSE >>=
%
%colors.vec<-c( "red","blue","orange","green","purple")
%
%colors.vec<-colors.vec[1:length(d.dim.vec)]
%plot(pert,apply(nc.jofc.diff.d[,,1],1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),col=colors.vec[1])
%for (d.i in 2:length(d.dim.vec)){
%	points(pert,apply(nc.jofc.diff.d[,,d.i],1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),pch=1,col=colors.vec[d.i])
%}
%for (d.i in 1:length(d.dim.vec)){
%	points(pert,apply(nc.cmds.d[,,d.i],1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),pch=2,col=colors.vec[d.i])
%}
%for (d.i in 1:length(d.dim.vec)){
%	points(pert,apply(nc.jofc.weighted.d[,,d.i],1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),pch=3,col=colors.vec[d.i])
%}
%for (d.i in 1:length(d.dim.vec)){
%	points(pert,apply(nc.jofc.unweighted.d[,,d.i],1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),pch=4,col=colors.vec[d.i])
%}
%legend.txt<- c("diff dist","CMDS","weighted.graph","unweighted.graph")
%legend.txt <- c(legend.txt,d.dim.vec)
%legend(x="topright",legend=legend.txt, 
%		col =c(rep(1,4),colors.vec),pch=c(1:4,rep(1,length(d.dim.vec))))
%title("marriage o jofc")
%abline(h=1/(n-m),lty=2) ### chance?  apparently not!?
%abline(v=1/2,lty=2) ### chance?  gotta be!?
%@


<<graph-plot-3, echo=FALSE,fig=TRUE,results=hide,cache=FALSE,dependson=JOFC-graph-sim-d >>=
colors.vec<-c( "red","blue","orange","green","purple")

colors.vec<-colors.vec[1:length(d.dim.vec)]
plot(pert,apply(nc.jofc.diff.d[,,1],1,mean)/(n-m),
		xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),col=colors.vec[1],type="l")
for (d.i in 2:length(d.dim.vec)){
	lines(pert,apply(nc.jofc.diff.d[,,d.i],1,mean)/(n-m),xlab="perturbation parameter",
			ylab="Fraction of  correct matches",ylim=c(0,1),col=colors.vec[d.i])
}
for (d.i in 1:length(d.dim.vec)){
	lines(pert,apply(nc.cmds.d[,,d.i],1,mean)/(n-m),xlab="perturbation parameter",
			ylab="Fraction of  correct matches",ylim=c(0,1),lty=2,col=colors.vec[d.i])
}
for (d.i in 1:length(d.dim.vec)){
	lines(pert,apply(nc.jofc.weighted.d[,,d.i],1,mean)/(n-m), lty=4,lwd=2,
			xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),col=colors.vec[d.i])
}

legend.txt <- c("diff dist","CMDS","weighted.graph")
legend.txt <- c(legend.txt,d.dim.vec)
legend(x="topright",legend=legend.txt, col =c(rep(1,3),colors.vec),
		lty=c(c(1,2,4),rep(1,length(d.dim.vec))))
title("marriage o jofc")
abline(h=1/(n-m),lty=2) ### chance?  apparently not!?
abline(v=1/2,lty=2) ### chance?  gotta be!?
@



<<JOFC-graph-sim-3, echo=FALSE,fig=FALSE,results=hide,cache=TRUE,trace=TRUE,depenson=JOFC-on-ER-Graph >>=

w.vals.vec <- c(0.2,0.5,0.7,0.8,0.9,0.99)

w.max.index<-length(w.vals.vec)



nc.jofc.diff.w       = array(0,dim=c(npert,nmc,length(w.vals.vec)))
nc.jofc.weighted.w   = array(0,dim=c(npert,nmc,length(w.vals.vec)))
nc.jofc.unweighted.w = array(0,dim=c(npert,nmc,length(w.vals.vec)))





# these three lines are not used, really ...
# they just set up a dummy D.M which is the correct object for input to fullmatch".
# i'm just using Sancar's object ... i don't really understand it!
G<-matrix(0,n,n)
G.comb<-matrix(0,2*n,2*n)
Graph.M <- graph.adjacency(G.comb,weighted= NULL ,mode="undirected")
D.M<-shortest.paths(Graph.M)

seed<-123

for(imc in 1:nmc)
{
	G<-ER(n,0.5)
	for(ipert in 1:npert)
	{
		
		Gp<-bitflip(G ,pert[ipert],pert[ipert])
		Graph.1<-graph.adjacency(G)
		Graph.2<-graph.adjacency(Gp)
		D.1<-shortest.paths(Graph.1)
		D.2<-shortest.paths(Graph.2)
		oos.sampling<-sample(1:n,size=n-m,replace=FALSE)
		in.sample.ind<-rep(TRUE,2*n)
		in.sample.ind[oos.sampling]<-FALSE
		in.sample.ind[n+oos.sampling]<-FALSE
		
		
		J.1 =jofc.diffusion.dist(G,Gp,
				in.sample.ind,
				d.dim=d.dim,
				w.vals.vec,
				graph.is.directed=FALSE,
				oos=oos,
				wt.matrix.1=NULL,
				wt.matrix.2=NULL,
				sep.graphs=TRUE)
		for (w.i in 1:w.max.index){
			M = solveMarriage(J.1[[w.i]])
			nc.jofc.diff.w[ipert,imc,w.i] = present(M)         # returns the number correct in the marriage?
		}
		
		J.2 =jofc(G,Gp,
				in.sample.ind,
				d.dim=d.dim,
				w.vals.vec,
				graph.is.directed=FALSE,
				oos=oos,          
				wt.matrix.1=NULL,
				wt.matrix.2=NULL,
				sep.graphs=TRUE)
		for (w.i in 1:w.max.index){
			M = solveMarriage(J.2[[w.i]])
			nc.jofc.weighted.w[ipert,imc,w.i] = present(M)         # returns the number correct in the marriage?
		}
		J.3 =jofc(G,Gp,
				in.sample.ind,
				d.dim=d.dim,
				w.vals.vec,
				graph.is.directed=FALSE,
				oos=oos,
				use.weighted.graph=FALSE,
				wt.matrix.1=NULL,
				wt.matrix.2=NULL,
				sep.graphs=TRUE)
		for (w.i in 1:w.max.index){
			M = solveMarriage(J.3[[w.i]])
			nc.jofc.unweighted.w[ipert,imc,w.i] = present(M)         # returns the number correct in the marriage?
		}
		
		
		
	}
}
@
This graph shows the effect of the weight parameter of stress $w$ on the probability of true matches.

<<graph-plot-4, echo=FALSE,fig=TRUE,results=hide,cache=FALSE,dependson=JOFC-graph-sim-3 >>=

colors.vec<-c( "red","blue","orange","black","purple")
colors.vec<- colors.vec[1:w.max.index]
plot(pert,apply(nc.jofc.diff.w[,,1],1,mean)/(n-m),xlab="perturbation parameter",
		ylab="Fraction of  correct matches",ylim=c(0,1),col=colors.vec[1],type="l")
for (w.i in 2:w.max.index){
	lines(pert,apply(nc.jofc.diff.w[,,w.i],1,mean)/(n-m),
			xlab="perturbation parameter",ylab="Fraction of  correct matches",
			ylim=c(0,1),lty=1,col=colors.vec[w.i])
}

for (w.i in 1:w.max.index){
	lines(pert,apply(nc.jofc.weighted.w[,,w.i],1,mean)/(n-m),
			xlab="perturbation parameter",ylab="Fraction of  correct matches",
			ylim=c(0,1),lty=3,col=colors.vec[w.i])
}
for (w.i in 1:w.max.index){
	lines(pert,apply(nc.jofc.unweighted.w[,,w.i],1,mean)/(n-m),
			xlab="perturbation parameter",ylab="Fraction of  correct matches",
			ylim=c(0,1),lty=4,col=colors.vec[w.i])
}
legend.txt<- c("diff dist","weighted.graph","unweighted.graph")
legend.txt <- c(legend.txt,w.vals.vec)
legend(x="topright",legend=legend.txt, col =c(rep(1,3),colors.vec),
		lty=c(c(1,3,4),rep(1,w.max.index)))
title("marriage o jofc")
abline(h=1/(n-m),lty=2) ### chance?  apparently not!?
abline(v=1/2,lty=2) ### chance?  gotta be!?
@


This graph shows the effect of the diffusion distance parameter $T$ on the probability of true matches.


<<JOFC-graph-sim-5, echo=FALSE,fig=FALSE,results=hide,cache=TRUE,trace=TRUE,depenson=JOFC-on-ER-Graph >>=

T.diff.vec<- c(0.1,1,2,5,10)
nc.jofc.diff.T       = array(0,dim=c(npert,nmc,length(T.diff.vec)))




# these three lines are not used, really ...
# they just set up a dummy D.M which is the correct object for input to fullmatch".
# i'm just using Sancar's object ... i don't really understand it!
G<-ER(n,0.5)
G.comb<-omnibusM(G,G,diag(n))
Graph.M <- graph.adjacency(G.comb,weighted= NULL ,mode="undirected")
D.M<-shortest.paths(Graph.M)

seed<-123

for (T.i in 1:length(T.diff.vec)){
	T.diff<-T.diff.vec[T.i]
	for(imc in 1:nmc)
	{
		G<-ER(n,0.5)
		for(ipert in 1:npert)
		{
			
			Gp<-bitflip(G ,pert[ipert],pert[ipert])
			Graph.1<-graph.adjacency(G)
			Graph.2<-graph.adjacency(Gp)
			D.1<-shortest.paths(Graph.1)
			D.2<-shortest.paths(Graph.2)
			oos.sampling<-sample(1:n,size=n-m,replace=FALSE)
			in.sample.ind<-rep(TRUE,2*n)
			in.sample.ind[oos.sampling]<-FALSE
			in.sample.ind[n+oos.sampling]<-FALSE
			
			
			J.1 =jofc.diffusion.dist(G,Gp,
					in.sample.ind,
					d.dim=d.dim,
					w.vals.vec,
					graph.is.directed=FALSE,
					oos=oos,
					wt.matrix.1=NULL,
					wt.matrix.2=NULL,
					sep.graphs=TRUE)
			
			M = solveMarriage(J.1[[1]])
			nc.jofc.diff.T[ipert,imc,T.i] = present(M)         # returns the number correct in the marriage?							
		}
	}
}
@

<<graph-plot-5, echo=FALSE,fig=TRUE,results=hide,cache=FALSE,dependson=JOFC-graph-sim-5 >>=
		

colors.vec<-c( "red","blue","orange","green","purple")

colors.vec<-colors.vec[1:length(T.diff.vec)]
plot(pert,apply(nc.jofc.diff.T[,,1],1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),col=colors.vec[1],type="l")
for (T.i in 2:length(T.diff.vec)){
	lines(pert,apply(nc.jofc.diff.T[,,T.i],1,mean)/(n-m),xlab="perturbation parameter",ylab="Fraction of  correct matches",ylim=c(0,1),pch=1,col=colors.vec[T.i])
}
legend.txt <- c(T.diff.vec)
legend(x="topright",legend=legend.txt, 
		col =c(colors.vec),pch=rep(1,length(T.diff.vec)))
title("marriage o jofc (different diffusion param T)")
abline(h=1/(n-m),lty=2) ### chance?  apparently not!?
abline(v=1/2,lty=2) ### chance?  gotta be!?
@

\section{Experiments on Real data}

For experimental data, we consider two connectivity graphs of 279 neurons in the  worm C. elegans. The two conditions are two ways of measuring connectivity among neurons. The  weight matrix for the first connectivity type is Ac which is not symmetric, has values between 0 and 37 and is relatively sparse (has 2194 non-zero entries). The second connectivity type forms a unweighted graph. It is even sparser(1031 non-zero entries) than Ac. For each MC replicate, we leave out 10 pairs of vertices from each graph and use JOFC to out-of-sample embed these left out vertices. The embedded vertices are matched using Hungarian algorithm and number of true matches are counted. The MC replicate is repeated many times, to get an estimate of performance. 

<<JOFC-worm, echo=FALSE,fig=FALSE,results=tex,cache=TRUE,trace=TRUE>>=
load("./data/celegansGraph.Rd")
cep=FALSE
verbose= FALSE

Ac<-Ac*upper.tri(Ac)
Ag<-Ag*upper.tri(Ag)
Ac<-(Ac+t(Ac))
Ag<-(Ag+t(Ag))
diag(Ac)<-0
diag(Ag)<-0
Ac.w<- Ac
Ag.w<- Ag


Ac<- ifelse(Ac>0,1,0)
Ag<- ifelse(Ag>0,1,0)

#GRAPH TYPES
# 1. a)Undirected b)Directed
# 2. a)JOFC  embed   b) CMDS  embed
# 3. a)From Adjacency Matrix to Unweighted Minimum Distance 
#    b)From Adjacency Matrix to Weighted Minimum Distance
#    c) From Weight Matrix
# 4.  a) sep.graphs= TRUE, CEP's way oftreat two graphs separately to compute dissimilarities
# and impute W (off-diagonalblock matrix)
# b) sep.graphs= FALSE  join the graphs and compute dissimilarities from joint graph

n = nrow(Ag)
m = n-10 # the first m pairs are known matches ; the last n-m pairs are to-be-matched

T.diff<-2
d <- 10
npert = 11
nmc = 100
pert=(0:10)/10

nc.worms.jofc<-rep(0,nmc)
w.vals<-0.8

matched.cost<-0.01 #If matched.cost is equal to 1, consider an unweighted graph, with edges between matched vertices
#If matched.cost is  between 0 and 1, the graph is weighted with edges between matched vertices with weights equal to matched.cost. Edges between 
# vertices of the same condition have either weight 1 or 2 according to whether they're connected according to given adjacency matrix or not.
debug.mode<-FALSE

d.dim<-10




run.jofc.replicate.batch <- function(i, mc.rep.per.batch,method="jofc"){
	
	num.matches<-rep(0,mc.rep.per.batch)
	
	for ( j in 1:mc.rep.per.batch) {
		oos.sampling<-sample.int(n,size=n-m,replace=FALSE)
		in.sample.ind<-rep(TRUE,2*n)
		in.sample.ind[oos.sampling]<-FALSE
		in.sample.ind[n+oos.sampling]<-FALSE
		
		if (method=="jofc"){
			
			J = jofc(Ac,Ag,in.sample.ind,d.dim=d.dim,w.vals.vec=w.vals,
					wt.matrix.1=NULL,wt.matrix.2=NULL,
					use.weighted.graph=TRUE,
					sep.graphs=TRUE) 
		} else if (method=="jofc.wt"){
			
			J = jofc(Ac.w,Ag,in.sample.ind,d.dim=d.dim,w.vals.vec=w.vals,
					wt.matrix.1=Ac.w,wt.matrix.2=Ag.w,
					use.weighted.graph=TRUE,
					sep.graphs=TRUE) 
		} else if (method=="jofc.diff.dist"){
			J = jofc.diffusion.dist(Ac.w,Ag.w,in.sample.ind,d.dim=d.dim,,w.vals.vec=w.vals,
					wt.matrix.1=Ac.w,wt.matrix.2=Ag.w,
					sep.graphs=TRUE) 
			
		}
		
		M = solveMarriage(J[[1]])
		num.matches[j] = present(M)  
	}
	return (num.matches)
}

#require(doSMP)
#workers <- startWorkers(num.cpus) 
#registerDoSMP(workers)
times <- 4	# times to run the loop
run.per.batch <-1 

#run.results<-foreach(run.mc=1:(nmc/run.per.batch),.combine=c) %dopar% run.jofc.replicate.batch(run.mc,run.per.batch,method="jofc")


sfInit( parallel=TRUE, cpus=num.cpus )




sfClusterSetupRNG()   
sfLibrary (igraph)
sfLibrary(optmatch)
sfSource("./lib/simulation_math_util_fn.R")
sfSource("./lib/smacofM.R")
sfSource("./lib/oosIM.R")
sfSource("./lib/graph_embedding_fn.R")
sfSource("./lib/diffusion_distance.R")

#p.prime.cond = p+q

sfExport("Ac","Ag",
		"n",
		"m",

"T.diff",
"d",
"npert",

"pert",
"w.vals",



"matched.cost", #If matched.cost is equal to 1, consider an unweighted graph, with edges between matched vertices
#If matched.cost is  between 0 and 1, the graph is weighted with edges between matched vertices with weights equal to matched.cost. Edges between 
# vertices of the same condition have either weight 1 or 2 according to whether they're connected according to given adjacency matrix or not.
"debug.mode",

"d.dim",
"verbose"
)

print("Starting parallelization in gaussian_simulation_jofc_tradeoff_sf") 
run.results <- sfLapply( 1:nmc, run.jofc.replicate.batch,mc.rep.per.batch=run.per.batch,method="jofc")

sfStop()


# stop workers
#stopWorkers(workers)





if (0){
n = nrow(Ag)
m = n-10 # the first m pairs are known matches ; the last n-m pairs are to-be-matched

T.diff<-5
d<-8
npert = 11
nmc = 150
pert=(0:10)/10
nc.jofc = matrix(0,npert,nmc)
nc.cmds = matrix(0,npert,nmc)
matched.cost<-0.01
nc.worms.jofc<-rep(0,nmc)
w.vals<-0.9

matched.cost<-0.01 #If matched.cost is equal to 1, consider an unweighted graph, with edges between matched vertices
#If matched.cost is  between 0 and 1, the graph is weighted with edges between matched vertices with weights equal to matched.cost. Edges between 
# vertices of the same condition have either weight 1 or 2 according to whether they're connected according to given adjacency matrix or not.
debug.mode<-FALSE
if (debug.mode){
	n.v<-100
	n.np<- 5
	m<- 5
}
d<-4


G<-ER(n,0.5)
G.comb<-omnibusM(G,G,diag(n))
Graph.M <- graph.adjacency(G.comb,weighted= NULL ,mode="undirected")
D.M<-shortest.paths(Graph.M)

seed<-12344439
for(imc in 1:nmc)
{
	oos.sampling<-sample.int(n,size=n-m,replace=FALSE)
	in.sample.ind<-rep(TRUE,2*n)
	in.sample.ind[oos.sampling]<-FALSE
	in.sample.ind[n+oos.sampling]<-FALSE
	
		
		J = jofc(Ac.w,Ag.w,in.sample.ind,d.dim=6,
				wt.matrix.1=Ac.w,wt.matrix.2=Ag.w,
				use.weighted.graph=TRUE,
				sep.graphs=FALSE) 
		M = solveMarriage(J[[1]])
		nc.worms.jofc[imc] = present(M)         # returns the number correct in the marriage?
		
	}
}
print(nc.worms.jofc)

@




\section{1-to-k matching of vertices}

Now suppose $A \in \mathcal{R}^{(r+s)\times (r+s)}$ 
and $B  \in \mathcal{R}^{(k\times (r+s))\times (k \times(r+s))}$ are adjacency matrices for graphs. 
A vertex in $A$ is matched with $k$ vertices in $B$. Suppose we have a matching between vertices of $A_{11}$ and $B_{11}$ ie the first $r$ vertices
of $A$'s graph correspond respectively to the first $k \times r$ vertices of $B$'s graph, $i^{th}$ vertex of $A$ matched to  vertices of $B_{11}$ with indices from  $k \times (i-1)+1$
to $k \times (i-1)+k$. Our task is  to find $k$ closest matches to $s$ vertices of $A$ among $k \times s$ vertices of $B$. 
The three information retrieval performance measures are used: Precision, Recall and F-measure.

$$\mathrm{Precision} =\frac{\textrm{Number of correct matches found}}{\textrm{Number of found matches}}$$
$$\mathrm{Recall}    =\frac{\textrm{Number of correct matches found}}{\textrm{Number of true matches}}$$

$$F-measure  =\frac{2 \times \textrm{Precision} \times \textrm{Recall}}{\textrm{Precision} + \textrm{Recall}}$$



<<JOFC-on-ER-Graph-1-k, echo=FALSE,fig=FALSE,results=hide,cache=TRUE,trace=TRUE>>=
require(igraph)
require(optmatch)
source("./lib/simulation_math_util_fn.R")
source("./lib/smacofM.R")
source("./lib/oosIM.R")
source("./lib/oosMDS.R")
source("./lib/diffusion_distance.R")
source("./lib/graph_embedding_fn_many.R")

cep=TRUE
verbose= FALSE
oos=TRUE
oos.cep = TRUE

a.cep <-20


n.1 = 40
n.2 = 20
n<- n.2
m = 5 # number of test nodes in the second graph that  are to-be-matched

npert = 11
nmc = 100
pert=(0:10)/10
nc.jofc.diff.p = matrix(0,npert,nmc)
nc.jofc.weighted.p = matrix(0,npert,nmc)
nc.jofc.unweighted.p = matrix(0,npert,nmc)

nc.jofc.diff.r = matrix(0,npert,nmc)
nc.jofc.weighted.r = matrix(0,npert,nmc)
nc.jofc.unweighted.r = matrix(0,npert,nmc)

nc.jofc.diff.f = matrix(0,npert,nmc)
nc.jofc.weighted.f = matrix(0,npert,nmc)
nc.jofc.unweighted.f = matrix(0,npert,nmc)



nc.cmds = matrix(0,npert,nmc)

matched.cost<-0.01


#w.vals.vec <- c(0.5,0.7,0.9,0.95)
w.vals.vec <- c(0.7)

w.max.index<-length(w.vals.vec)

matched.cost<-0.01 #If matched.cost is equal to 1, consider an unweighted graph, with edges between matched vertices
#If matched.cost is  between 0 and 1, the graph is weighted with edges between matched vertices with weights equal to matched.cost. Edges between 
# vertices of the same condition have either weight 1 or 2 according to whether they're connected according to given adjacency matrix or not.

d.dim<-8
T.diff<-1

dims.for.dist <- 1:d.dim

seed<-123

nmc<-100
for(imc in 1:nmc)
{
	G.orig<-ER(n,0.5)
	diag(G.orig)<-1
	k<-1
	repeat.counts <-1+rgeom(n,0.2)
	new.n <- sum(repeat.counts)
	int.end.indices<-cumsum(repeat.counts)
	int.start.indices<-c(1,int.end.indices+1)
	corr.list<-vector("list",n)
	G<-matrix(0,new.n,new.n)
	for (i in 1:n){
		for (j in 1:repeat.counts[i]){
			G[k,]<-rep(G.orig[i,],times=repeat.counts)
			G[,k]<-rep(G.orig[i,],times=repeat.counts)
			#	G<-perturbG(G,0.1)
			k <- k+1
		}
		corr.list[[i]] <- list(a=(int.start.indices[i]:int.end.indices[i]),b=i)
	}
	
	diag(G.orig)<-0
	diag(G)<-0
	
	for(ipert in 1:npert)
	{
		Y.emb<-NULL
		Gp<-bitflip(G.orig ,pert[ipert],pert[ipert])
		Graph.1<-graph.adjacency(G)
		Graph.2<-graph.adjacency(Gp)
		D.1<-shortest.paths(Graph.1)
		D.2<-shortest.paths(Graph.2)
		oos.sampling<-sample(1:n, size=m, replace=FALSE)
		in.sample.ind.1<-rep(TRUE,new.n)
		for ( s in 1:m){
			a<-int.start.indices[oos.sampling[s]]
			b<-int.end.indices[oos.sampling[s]]
			in.sample.ind.1[a:b]<-FALSE
		}
		
		in.sample.ind.2<-rep(TRUE,n)
		in.sample.ind.2[oos.sampling]<-FALSE
		
		#if (imc==1) print(in.sample.ind)
		
		J.1 =jofc.diffusion.dist.many(G,Gp,corr.list,
				in.sample.ind.1,in.sample.ind.2,
				d.dim=d.dim,
				w.vals.vec,
				graph.is.directed=FALSE,
				oos=oos,
				wt.matrix.1=NULL,
				wt.matrix.2=NULL,
				sep.graphs=TRUE
		)
		
		
		M = solveMarriage(J.1[[1]])
		match.perf.eval <- present.many(M,corr.list,in.sample.ind.1,in.sample.ind.2)
		nc.jofc.diff.p[ipert,imc] = mean(match.perf.eval$P)
		nc.jofc.diff.r[ipert,imc] = mean(match.perf.eval$R)
		nc.jofc.diff.f[ipert,imc] <- mean(match.perf.eval$F)
		
		
		J.2 =jofc.many(G,Gp,corr.list,
				in.sample.ind.1,in.sample.ind.2,
				d.dim=d.dim,
				w.vals.vec,
				graph.is.directed=FALSE,	
				oos=oos,          
				
				wt.matrix.1=NULL,
				wt.matrix.2=NULL,
				sep.graphs=TRUE)
		
		M = solveMarriage(J.2[[1]])
		
		match.perf.eval <- present.many(M,corr.list,in.sample.ind.1,in.sample.ind.2)
		nc.jofc.weighted.p[ipert,imc] = mean(match.perf.eval$P)
		nc.jofc.weighted.r[ipert,imc] = mean(match.perf.eval$R)
		nc.jofc.weighted.f[ipert,imc] = mean(match.perf.eval$F)
		
		
		J.3 =jofc.many(G,Gp,corr.list,
				in.sample.ind.1,in.sample.ind.2,
				d.dim=d.dim,
				w.vals.vec,	
				graph.is.directed=FALSE,
				oos=oos,
				use.weighted.graph=FALSE,
				wt.matrix.1=NULL,
				wt.matrix.2=NULL,
				sep.graphs=TRUE)
		
		M = solveMarriage(J.3[[1]])
		match.perf.eval <- present.many(M,corr.list,in.sample.ind.1,in.sample.ind.2)
		nc.jofc.unweighted.p[ipert,imc] = mean(match.perf.eval$P)
		nc.jofc.unweighted.r[ipert,imc] = mean(match.perf.eval$R)
		nc.jofc.unweighted.f[ipert,imc] =mean(match.perf.eval$F)
		
				
		
	}
}

@


<<JOFC-graph-1-to-k-match-plot-1, echo=FALSE,fig=TRUE,results=hide,trace=TRUE,depenson=JOFC-on-ER-Graph >>=

### notice that the %correctmatches decreases as perturbation parameter increases! :-)


colors.vec<-c( "red","blue","orange","green")
colors.vec<-colors.vec[1:4]
plot(pert,apply(nc.jofc.diff.f,1,mean),xlab="perturbation parameter",ylab="Average F-measure",ylim=c(0,1),col=colors.vec[1])
#points(pert,apply(nc.cmds,1,mean)/(n-m),xlab="perturbation parameter",ylab="Average F-measure",ylim=c(0,1),pch=2,col=colors.vec[2])

points(pert,apply(nc.jofc.weighted.f,1,mean),xlab="perturbation parameter",ylab="Average F-measure",ylim=c(0,1),pch=3,col=colors.vec[3])

points(pert,apply(nc.jofc.unweighted.f,1,mean),xlab="perturbation parameter",ylab="Average F-measure",ylim=c(0,1),pch=4,col=colors.vec[4])

legend.txt<- c("diff dist","weighted.graph","unweighted.graph")
legend(x="topright",legend=legend.txt, col =colors.vec[c(1,3,4)],pch=c(1,3,4))
title("F-measure 1-to-k matching o jofc")
abline(h=1/(m),lty=2) ### chance?  apparently not!?
abline(v=1/2,lty=2) ### chance?  gotta be!?
@

<<JOFC-graph-1-to-k-match-plot-2, echo=FALSE,fig=TRUE,results=hide,trace=TRUE,depenson=JOFC-on-ER-Graph >>=


colors.vec<-c( "red","blue","orange","green")
colors.vec<-colors.vec[1:4]
plot(pert,apply(nc.jofc.diff.p,1,mean),xlab="perturbation parameter",
		ylab="Average precision/recall",ylim=c(0,1),col=colors.vec[1],type="l")
#points(pert,apply(nc.cmds,1,mean)/(n-m),xlab="perturbation parameter",
#     ylab="Average precision/recall",ylim=c(0,1),pch=2,col=colors.vec[2])


lines(pert,apply(nc.jofc.weighted.p,1,mean),xlab="perturbation parameter",
		ylab="Average precision/recall",ylim=c(0,1),col=colors.vec[3])

lines(pert,apply(nc.jofc.unweighted.p,1,mean),xlab="perturbation parameter",
		ylab="Average precision/recall",ylim=c(0,1),col=colors.vec[4])


lines(pert,apply(nc.jofc.diff.r,1,mean),xlab="perturbation parameter",
		ylab="Average precision/recall",ylim=c(0,1),lty=2,col=colors.vec[1])


lines(pert,apply(nc.jofc.weighted.r,1,mean),xlab="perturbation parameter",
		ylab="Average precision/recall",ylim=c(0,1),lty=2,col=colors.vec[3])

lines(pert,apply(nc.jofc.unweighted.r,1,mean),xlab="perturbation parameter",
		ylab="Average precision/recall",ylim=c(0,1),lty=2,col=colors.vec[4])


legend.txt <- rep(c("diff dist","weighted.graph","unweighted.graph"),each=2)
legend.txt <- paste(legend.txt,c("Precision","Recall"))
legend(x="topright",legend=legend.txt, col =rep(colors.vec[c(1,3,4)],each=2),lty=c(1,2))
title("marriage o jofc")
abline(v=1/2,lty=2) ### chance?  gotta be!?
@

\end{document}
